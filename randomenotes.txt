new json policy

{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Sid": "Allow Public Access to All Objects",
			"Effect": "Allow",
			"Principal": "*",
			"Action": "s3:GetObject",
			"Resource": "arn:aws:s3:::www.s3s.com/*"
		}
	]
}

def string_bits(str):
  result = ""
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result

//

def string_match(a, b):
  shorter = min(len(a), len(b))
  count = 0
  for i in range(shorter-1):
    a_sub = a[i:i+2]
    b_sub = b[i:i+2]
    if a_sub == b_sub:
      count = count + 1

python kill > size 128

target_size = 128
import os
for dirpath, dirs, files in os.walk('.'):
    for file in files: 
        path = os.path.join(dirpath, file)
        if os.stat(path).st_size == target_size:
            os.remove(path)

{
   _id: ObjectId(7df78ad8902c)
   title: 'MongoDB Overview', 
   description: 'MongoDB is no sql database',
   by: 'tutorials point',
   url: 'http://www.tutorialspoint.com',
   tags: ['mongodb', 'database', 'NoSQL'],
   likes: 100, 
   comments: [	
      {
         user:'user1',
         message: 'My first comment',
         dateCreated: new Date(2011,1,20,2,15),
         like: 0 
      },
      {
         user:'user2',
         message: 'My second comments',
         dateCreated: new Date(2011,1,25,7,45),
         like: 5
      }
   ]
}

//gmail > pdf

 function saveGmailAsPDF() { 

   var gmailLabels  = "PDF";  
   var driveFolder  = "My Gmail";

   var threads = GmailApp.search("in:" + gmailLabels, 0, 5);  

   if (threads.length > 0) {

     /* Google Drive folder where the Files would be saved */
     var folders = DriveApp.getFoldersByName(driveFolder);
     var folder = folders.hasNext() ? 
         folders.next() : DriveApp.createFolder(driveFolder);

     /* Gmail Label that contains the queue */
     var label = GmailApp.getUserLabelByName(gmailLabels) ?     
         GmailApp.getUserLabelByName(gmailLabels) : GmailApp.createLabel(driveFolder);

     for (var t=0; t<threads.length; t++) {

       threads[t].removeLabel(label);
       var msgs = threads[t].getMessages();

       var html = "";
       var attachments = [];

       var subject = threads[t].getFirstMessageSubject();

       /* Append all the threads in a message in an HTML document */
       for (var m=0; m<msgs.length; m++) {

         var msg = msgs[m];

         html += "From: " + msg.getFrom() + "<br />";  
         html += "To: " + msg.getTo() + "<br />";
         html += "Date: " + msg.getDate() + "<br />";
         html += "Subject: " + msg.getSubject() + "<br />"; 
         html += "<hr />";
         html += msg.getBody().replace(/<img[^>]*>/g,"");
         html += "<hr />";

         var atts = msg.getAttachments();
         for (var a=0; a<atts.length; a++) {
           attachments.push(atts[a]);
         }
       }

       /* Save the attachment files and create links in the document's footer */
       if (attachments.length > 0) {
         var footer = "<strong>Attachments:</strong><ul>";
         for (var z=0; z<attachments.length; z++) {
           var file = folder.createFile(attachments[z]);
           footer += "<li><a href='" + file.getUrl() + "'>" + file.getName() + "</a></li>";
         }
         html += footer + "</ul>";
       }

       /* Conver the Email Thread into a PDF File */
       var tempFile = DriveApp.createFile("temp.html", html, "text/html");
       folder.createFile(tempFile.getAs("application/pdf")).setName(subject + ".pdf");
       tempFile.setTrashed(true);

     }
   }
 }  

N rooms from 1 : N
S string with N charaters "RGB"
R + B = G
B + R = R
G + R = B

Example

Input
3
3
RGR
3
RRR
3
RGB
Output
1
0
2

Solution:
find more frequent color = F
answer = len string - count of F


def count(s):
    r = 0
    b = 0
    g = 0
    for i in s:
        if i == "g":
            g += 1
        if i == "b":
            b += 1
        if i == "r":
            r += 1
    return g, r, b


def houses(n):
    n = [g, r, b]
    sums = sum(n)
    high == max(n):
    new == high - sums
