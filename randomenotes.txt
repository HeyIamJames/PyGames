new json policy

{
	"Version": "2012-10-17",
	"Statement": [
		{
			"Sid": "Allow Public Access to All Objects",
			"Effect": "Allow",
			"Principal": "*",
			"Action": "s3:GetObject",
			"Resource": "arn:aws:s3:::www.s3s.com/*"
		}
	]
}

def string_bits(str):
  result = ""
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result

//

def string_match(a, b):
  shorter = min(len(a), len(b))
  count = 0
  for i in range(shorter-1):
    a_sub = a[i:i+2]
    b_sub = b[i:i+2]
    if a_sub == b_sub:
      count = count + 1

python kill > size 128

target_size = 128
import os
for dirpath, dirs, files in os.walk('.'):
    for file in files: 
        path = os.path.join(dirpath, file)
        if os.stat(path).st_size == target_size:
            os.remove(path)

{
   _id: ObjectId(7df78ad8902c)
   title: 'MongoDB Overview', 
   description: 'MongoDB is no sql database',
   by: 'tutorials point',
   url: 'http://www.tutorialspoint.com',
   tags: ['mongodb', 'database', 'NoSQL'],
   likes: 100, 
   comments: [	
      {
         user:'user1',
         message: 'My first comment',
         dateCreated: new Date(2011,1,20,2,15),
         like: 0 
      },
      {
         user:'user2',
         message: 'My second comments',
         dateCreated: new Date(2011,1,25,7,45),
         like: 5
      }
   ]
}

//gmail > pdf

 function saveGmailAsPDF() { 

   var gmailLabels  = "PDF";  
   var driveFolder  = "My Gmail";

   var threads = GmailApp.search("in:" + gmailLabels, 0, 5);  

   if (threads.length > 0) {

     /* Google Drive folder where the Files would be saved */
     var folders = DriveApp.getFoldersByName(driveFolder);
     var folder = folders.hasNext() ? 
         folders.next() : DriveApp.createFolder(driveFolder);

     /* Gmail Label that contains the queue */
     var label = GmailApp.getUserLabelByName(gmailLabels) ?     
         GmailApp.getUserLabelByName(gmailLabels) : GmailApp.createLabel(driveFolder);

     for (var t=0; t<threads.length; t++) {

       threads[t].removeLabel(label);
       var msgs = threads[t].getMessages();

       var html = "";
       var attachments = [];

       var subject = threads[t].getFirstMessageSubject();

       /* Append all the threads in a message in an HTML document */
       for (var m=0; m<msgs.length; m++) {

         var msg = msgs[m];

         html += "From: " + msg.getFrom() + "<br />";  
         html += "To: " + msg.getTo() + "<br />";
         html += "Date: " + msg.getDate() + "<br />";
         html += "Subject: " + msg.getSubject() + "<br />"; 
         html += "<hr />";
         html += msg.getBody().replace(/<img[^>]*>/g,"");
         html += "<hr />";

         var atts = msg.getAttachments();
         for (var a=0; a<atts.length; a++) {
           attachments.push(atts[a]);
         }
       }

       /* Save the attachment files and create links in the document's footer */
       if (attachments.length > 0) {
         var footer = "<strong>Attachments:</strong><ul>";
         for (var z=0; z<attachments.length; z++) {
           var file = folder.createFile(attachments[z]);
           footer += "<li><a href='" + file.getUrl() + "'>" + file.getName() + "</a></li>";
         }
         html += footer + "</ul>";
       }

       /* Conver the Email Thread into a PDF File */
       var tempFile = DriveApp.createFile("temp.html", html, "text/html");
       folder.createFile(tempFile.getAs("application/pdf")).setName(subject + ".pdf");
       tempFile.setTrashed(true);

     }
   }
 }  

N rooms from 1 : N
S string with N charaters "RGB"
R + B = G
B + R = R
G + R = B

Example

Input
3
3
RGR
3
RRR
3
RGB
Output
1
0
2

Solution:
find more frequent color = F
answer = len string - count of F


def count(s):
    r = 0
    b = 0
    g = 0
    for i in s:
        if i == "g":
            g += 1
        if i == "b":
            b += 1
        if i == "r":
            r += 1
    return g, r, b


def houses(n):
    n = [g, r, b]
    sums = sum(n)
    high == max(n):
    new == high - sums

#include<iostream>
 
using namespace std;
 
int main(){
  float amount,balance;
  cin>>amount>>balance;
  if((amount < balance-0.5) && (int(amount)%5 == 0))
    balance = balance-amount-0.5;
  cout<<balance<<endl;
}


// 100 doors
#include <iostream>
#include <string>

int main()
{
    for(int i=1; i*i<=100; i++)
            std::cout<<"Door "<<i*i<<" is open!"<<std::endl;
}

//24
#include <random>
#include <iostream>
#include <stack>
#include <set>
#include <string>
#include <functional>
using namespace std;
 
class RPNParse
{
public:
  stack<double> stk;
  multiset<int> digits;
 
  void op(function<double(double,double)> f)
  {
    if(stk.size() < 2)
      throw "Improperly written expression";
    int b = stk.top(); stk.pop();
    int a = stk.top(); stk.pop();
    stk.push(f(a, b));
  }
 
  void parse(char c)
  {
    if(c >= '0' && c <= '9')
    {
      stk.push(c - '0');
      digits.insert(c - '0');
    }
    else if(c == '+')
      op([](double a, double b) {return a+b;});
    else if(c == '-')
      op([](double a, double b) {return a-b;});
    else if(c == '*')
      op([](double a, double b) {return a*b;});
    else if(c == '/')
      op([](double a, double b) {return a/b;});
  }
 
  void parse(string s)
  {
    for(int i = 0; i < s.size(); ++i)
      parse(s[i]);
  }
 
  double getResult()
  {
    if(stk.size() != 1)
      throw "Improperly written expression";
    return stk.top();
  }
};
 
int main()
{
  random_device seed;
  mt19937 engine(seed());
  uniform_int_distribution<> distribution(1, 9);
  auto rnd = bind(distribution, engine);
 
  multiset<int> digits;
  cout << "Make 24 with the digits: ";
  for(int i = 0; i < 4; ++i)
  {
    int n = rnd();
    cout << " " << n;
    digits.insert(n);
  }
  cout << endl;
 
  RPNParse parser;
 
  try
  {
    string input;
    getline(cin, input);
    parser.parse(input);
 
    if(digits != parser.digits)
      cout << "Error: Not using the given digits" << endl;
    else
    {
      double r = parser.getResult();
      cout << "Result: " << r << endl;
 
      if(r > 23.999 && r < 24.001)
        cout << "Good job!" << endl;
      else
        cout << "Try again." << endl;
    }
  }
  catch(char* e)
  {
    cout << "Error: " << e << endl;
  }
  return 0;
}


/// fib q
m = 10**9+7
p = 2000000016
 
f2 = [[1,0]]
for i in range(32):
    a,b = f2[-1]
    f2.append([(pow(a,2,m)+2*a*b)%m,(pow(a,2,m)+b**2)%m])
 
def fib(x):
    bi = list(bin(x))
    res = None
    i = 0
    while len(bi) > 2:
        if bi.pop() == '1':
            if res:
                a,b=res
                c,d=f2[i]
                res = [(c*(a+b)+a*d)%m,(a*c+b*d)%m]
            else:
                res = f2[i]
        i += 1
    return res
 
def fib2(x, y):
    a,b,c,d = x[0],x[1],y[0],y[1]
    res = [(c*(a+b)+a*d)%m ,(a*c+b*d)%m]
    return res
 
n, q = [int(i) for i in input().split()]
a = [int(i) for i in input().split()]
 
for i in range(q):
 
    typ, x, y = input().split()
    x, y = int(x), int(y)
    
    if typ == 'Q':
        res = fib(a[x-1]).copy()
        for i in range(x,y):
            fai = fib(a[i])
            fnext = fib2(res,fai)
            res[0] = (res[0] + fnext[0] + fai[0] ) % m
            res[1] = (res[1] + fnext[1] + fai[1] ) % m
        print(res[0])
 
    else:
        a[x-1]=y
 
"""
LDSC
s + c*s

5 1 5 1
need 5 by 1 day

10 2 2 2
4, 8 = 12
"""

def likeme(L, D, S, C):
    Likes = S + S * C
    return L

Likes = D * S

Public static Future<Boolean> portIsOpen(final ExecutorService es, final String ip, final int port, final int timeout) {
  return es.submit(new Callable<Boolean>() {
      @Override public Boolean call() {
        try {
          Socket socket = new Socket();
          socket.connect(new InetSocketAddress(ip, port), timeout);
          socket.close();
          return true;
        } catch (Exception ex) {
          return false;
        }
      }
   });
}
